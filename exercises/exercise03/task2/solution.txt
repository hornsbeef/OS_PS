https://linuxize.com/post/how-to-set-and-list-environment-variables-in-linux/
https://linux.die.net/man/1/env
https://www.man7.org/linux/man-pages/man1/export.1p.html



How do you set/unset environment variables in your shell?
->SET:	
	->for use in single command: 	e.g.:	env OFFSET=100 ./calculator + 1
	->for general set: export		e.g.:	export OFFSET=100
		in current shell and child processes
	->for persistant usage:			add to e.g.: ~/.bashrc	export OFFSET=100
->UNSET:
	-> via unset 	e.g.: 	unset OFFSET=100 


How can you retrieve the returned exit code in your shell after running the program?
	echo $?
		-> returns exit code of last executed command in terminal 


In your shell ;, &&, and || can be used to execute multiple commands on a single line. What are the differences between these 3 operators?

(;) is used to separate multiple commands, allowing you to execute them sequentially on a single line. 
e.g.:	export OFFSET=100 ; ./calculator + 5 ; unset OFFSET ; ./calculator + 5

(&&) is used as a logical AND operator. When && is used to separate commands, the second command will only be executed if the first command is executed successfully, meaning it exits without errors. This operator allows for conditional execution of commands based on the success of the preceding command.
e.g.:	mkdir && echo "SUCCESS" -> will NOT print SUCCESS, because mkdir on its own has exit code 1
e.g.:	ls && echo "SUCCESS" -> WILL print SUCCESS (if ls does not fail...)

(||) is a logical OR operator. When || is used to separate commands, the second command will only be executed if the first command fails, meaning it exits with a non-zero status. 
e.g.: mkdir && echo "SUCCESS" || echo "FAIL"	-> prints FAIL



What is the PATH environment variable and why is it important?

usually the whole file-path is required to execute a program. But for some programs like date or ls, 
this is not necessary. That is because of the PATH variable. It pecifies a set of directories where executable programs are located. When a command is entered in the CLI, the system searches for the program in all directories listed in the PATH variable. Therefore it is important, to easily access and run executable programs from various directories without specifying the complete path each time they execute a command.






Notes: 
env – The command allows you to run another program in a custom environment without modifying the current one. When used without an argument it will print a list of the current environment variables.

printenv – The command prints all or the specified environment variables.

unset – The command deletes shell and environment variables.

export – The command sets environment variables.
Environment Variables created in this way are available only in the current session. If you open a new shell or if you log out all variables will be lost.

------
set – The set command in Bash is used to set or unset specific flags and settings that determine the behavior of the script and aid in executing tasks. It allows for changing or displaying shell attributes and parameters.
 When used without an argument it will print a list of all variables including environment and shell variables, and shell functions.
------


Persistent Environment Variables

To make Environment variables persistent you need to define those variables in the bash configuration files. In most Linux distributions when you start a new session, environment variables are read from the following files:

    /etc/environment 
	- Use this file to set up system-wide environment variables. 
	- Variables in this file are set in the following format:

    FOO=bar
    VAR_TEST="Test Var"


	/etc/profile 
	- Variables set in this file are loaded whenever a bash login shell is entered. 
	- When declaring environment variables in this file you need to use the export command:

	export JAVA_HOME="/path/to/java/home"
	export PATH=$PATH:$JAVA_HOME/bin

Per-user shell specific configuration files. 
	>For example, if you are using Bash, you can declare the variables in the ~/.bashrc:

	export PATH="$HOME/bin:$PATH"

	>To load the new environment variables into the current shell session use the source command:

	source ~/.bashrc

