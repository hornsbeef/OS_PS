Explain what the following operators do: <, >, 2>, 2>&1. Therefore, provide a task2.txt file.

< :
"<" symbol is used for input redirection.
Specifically, it is used to redirect input from a file to a command.
This means that the command will take its input from the contents of the specified file
rather than directly from the user typing into the CLI.
example: cat < file.txt

> :
is used for output redirection.
Specifically, it is used to redirect the output of a command to a file instead of the console.
This means that the output of the command will be saved to the specified file
rather than being displayed on the screen.
example ./cat_cut > test.txt

2> :
the "2>" symbol is used for error output redirection.
Specifically, it is used to redirect error messages (standard error, stderr) to a specified location,
such as a file or /dev/null to discard the error output.
This allows users to separate error messages from standard output and handle them differently,
like saving them to a file for later analysis or ignoring them completely by sending them to /dev/null.

2>&1 :
is used for error and standard output redirection.
Specifically, it is used to redirect standard error (stderr) to the same location as standard output (stdout).
This means that any error messages generated by a command will be treated as standard output and
displayed to the console or redirected to a file along with the standard output.
This can be useful for capturing error messages along with the output of a command,
making it easier to diagnose issues. The "2>&1" symbol is often used in conjunction with output redirection,
such as ">".
For example, "command > file 2>&1" would redirect both the standard output and error output of the command to the file.
example:
./this_directory_does_NOT_exist/cat_cut > test.txt 2>&1
-> in the file test.txt :
    -bash: ./this_directory_does_NOT_exist/cat_cut: No such file or directory